/*
 * Cube.js
 *
 * Cube.js Swagger Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CubeJS.Gateway.Client.Client.OpenAPIDateConverter;

namespace CubeJS.Gateway.Client.Model
{
    /// <summary>
    /// V1LoadResponse
    /// </summary>
    [DataContract(Name = "V1LoadResponse")]
    public partial class V1LoadResponse : IEquatable<V1LoadResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1LoadResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadResponse" /> class.
        /// </summary>
        /// <param name="pivotQuery">pivotQuery.</param>
        /// <param name="slowQuery">slowQuery.</param>
        /// <param name="queryType">queryType.</param>
        /// <param name="results">results (required).</param>
        public V1LoadResponse(Object pivotQuery = default(Object), bool slowQuery = default(bool), string queryType = default(string), List<V1LoadResult> results = default(List<V1LoadResult>))
        {
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new ArgumentNullException("results is a required property for V1LoadResponse and cannot be null");
            }
            this.Results = results;
            this.PivotQuery = pivotQuery;
            this.SlowQuery = slowQuery;
            this.QueryType = queryType;
        }

        /// <summary>
        /// Gets or Sets PivotQuery
        /// </summary>
        [DataMember(Name = "pivotQuery", EmitDefaultValue = false)]
        public Object PivotQuery { get; set; }

        /// <summary>
        /// Gets or Sets SlowQuery
        /// </summary>
        [DataMember(Name = "slowQuery", EmitDefaultValue = true)]
        public bool SlowQuery { get; set; }

        /// <summary>
        /// Gets or Sets QueryType
        /// </summary>
        [DataMember(Name = "queryType", EmitDefaultValue = false)]
        public string QueryType { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = true)]
        public List<V1LoadResult> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1LoadResponse {\n");
            sb.Append("  PivotQuery: ").Append(PivotQuery).Append("\n");
            sb.Append("  SlowQuery: ").Append(SlowQuery).Append("\n");
            sb.Append("  QueryType: ").Append(QueryType).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1LoadResponse);
        }

        /// <summary>
        /// Returns true if V1LoadResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of V1LoadResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1LoadResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PivotQuery == input.PivotQuery ||
                    (this.PivotQuery != null &&
                    this.PivotQuery.Equals(input.PivotQuery))
                ) && 
                (
                    this.SlowQuery == input.SlowQuery ||
                    this.SlowQuery.Equals(input.SlowQuery)
                ) && 
                (
                    this.QueryType == input.QueryType ||
                    (this.QueryType != null &&
                    this.QueryType.Equals(input.QueryType))
                ) && 
                (
                    this.Results == input.Results ||
                    this.Results != null &&
                    input.Results != null &&
                    this.Results.SequenceEqual(input.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PivotQuery != null)
                {
                    hashCode = (hashCode * 59) + this.PivotQuery.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SlowQuery.GetHashCode();
                if (this.QueryType != null)
                {
                    hashCode = (hashCode * 59) + this.QueryType.GetHashCode();
                }
                if (this.Results != null)
                {
                    hashCode = (hashCode * 59) + this.Results.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
