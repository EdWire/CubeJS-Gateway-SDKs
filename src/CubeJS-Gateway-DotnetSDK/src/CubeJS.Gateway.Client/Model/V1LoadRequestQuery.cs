/*
 * Cube.js
 *
 * Cube.js Swagger Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CubeJS.Gateway.Client.Client.OpenAPIDateConverter;

namespace CubeJS.Gateway.Client.Model
{
    /// <summary>
    /// V1LoadRequestQuery
    /// </summary>
    [DataContract(Name = "V1LoadRequestQuery")]
    public partial class V1LoadRequestQuery : IEquatable<V1LoadRequestQuery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadRequestQuery" /> class.
        /// </summary>
        /// <param name="measures">measures.</param>
        /// <param name="dimensions">dimensions.</param>
        /// <param name="segments">segments.</param>
        /// <param name="timeDimensions">timeDimensions.</param>
        /// <param name="order">order.</param>
        /// <param name="limit">limit.</param>
        /// <param name="offset">offset.</param>
        /// <param name="filters">filters.</param>
        public V1LoadRequestQuery(List<string> measures = default(List<string>), List<string> dimensions = default(List<string>), List<string> segments = default(List<string>), List<V1LoadRequestQueryTimeDimension> timeDimensions = default(List<V1LoadRequestQueryTimeDimension>), List<List<string>> order = default(List<List<string>>), int limit = default(int), int offset = default(int), List<V1LoadRequestQueryFilterItem> filters = default(List<V1LoadRequestQueryFilterItem>))
        {
            this.Measures = measures;
            this.Dimensions = dimensions;
            this.Segments = segments;
            this.TimeDimensions = timeDimensions;
            this.Order = order;
            this.Limit = limit;
            this.Offset = offset;
            this.Filters = filters;
        }

        /// <summary>
        /// Gets or Sets Measures
        /// </summary>
        [DataMember(Name = "measures", EmitDefaultValue = false)]
        public List<string> Measures { get; set; }

        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name = "dimensions", EmitDefaultValue = false)]
        public List<string> Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name = "segments", EmitDefaultValue = false)]
        public List<string> Segments { get; set; }

        /// <summary>
        /// Gets or Sets TimeDimensions
        /// </summary>
        [DataMember(Name = "timeDimensions", EmitDefaultValue = false)]
        public List<V1LoadRequestQueryTimeDimension> TimeDimensions { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public List<List<string>> Order { get; set; }

        /// <summary>
        /// Gets or Sets Limit
        /// </summary>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public int Limit { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public int Offset { get; set; }

        /// <summary>
        /// Gets or Sets Filters
        /// </summary>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<V1LoadRequestQueryFilterItem> Filters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1LoadRequestQuery {\n");
            sb.Append("  Measures: ").Append(Measures).Append("\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  TimeDimensions: ").Append(TimeDimensions).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1LoadRequestQuery);
        }

        /// <summary>
        /// Returns true if V1LoadRequestQuery instances are equal
        /// </summary>
        /// <param name="input">Instance of V1LoadRequestQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1LoadRequestQuery input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Measures == input.Measures ||
                    this.Measures != null &&
                    input.Measures != null &&
                    this.Measures.SequenceEqual(input.Measures)
                ) && 
                (
                    this.Dimensions == input.Dimensions ||
                    this.Dimensions != null &&
                    input.Dimensions != null &&
                    this.Dimensions.SequenceEqual(input.Dimensions)
                ) && 
                (
                    this.Segments == input.Segments ||
                    this.Segments != null &&
                    input.Segments != null &&
                    this.Segments.SequenceEqual(input.Segments)
                ) && 
                (
                    this.TimeDimensions == input.TimeDimensions ||
                    this.TimeDimensions != null &&
                    input.TimeDimensions != null &&
                    this.TimeDimensions.SequenceEqual(input.TimeDimensions)
                ) && 
                (
                    this.Order == input.Order ||
                    this.Order != null &&
                    input.Order != null &&
                    this.Order.SequenceEqual(input.Order)
                ) && 
                (
                    this.Limit == input.Limit ||
                    this.Limit.Equals(input.Limit)
                ) && 
                (
                    this.Offset == input.Offset ||
                    this.Offset.Equals(input.Offset)
                ) && 
                (
                    this.Filters == input.Filters ||
                    this.Filters != null &&
                    input.Filters != null &&
                    this.Filters.SequenceEqual(input.Filters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Measures != null)
                {
                    hashCode = (hashCode * 59) + this.Measures.GetHashCode();
                }
                if (this.Dimensions != null)
                {
                    hashCode = (hashCode * 59) + this.Dimensions.GetHashCode();
                }
                if (this.Segments != null)
                {
                    hashCode = (hashCode * 59) + this.Segments.GetHashCode();
                }
                if (this.TimeDimensions != null)
                {
                    hashCode = (hashCode * 59) + this.TimeDimensions.GetHashCode();
                }
                if (this.Order != null)
                {
                    hashCode = (hashCode * 59) + this.Order.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Limit.GetHashCode();
                hashCode = (hashCode * 59) + this.Offset.GetHashCode();
                if (this.Filters != null)
                {
                    hashCode = (hashCode * 59) + this.Filters.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
