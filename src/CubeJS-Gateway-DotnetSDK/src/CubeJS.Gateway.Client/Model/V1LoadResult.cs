/*
 * Cube.js
 *
 * Cube.js Swagger Schema
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CubeJS.Gateway.Client.Client.OpenAPIDateConverter;

namespace CubeJS.Gateway.Client.Model
{
    /// <summary>
    /// V1LoadResult
    /// </summary>
    [DataContract(Name = "V1LoadResult")]
    public partial class V1LoadResult : IEquatable<V1LoadResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1LoadResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadResult" /> class.
        /// </summary>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="annotation">annotation (required).</param>
        /// <param name="data">data (required).</param>
        /// <param name="refreshKeyValues">refreshKeyValues.</param>
        public V1LoadResult(string dataSource = default(string), V1LoadResultAnnotation annotation = default(V1LoadResultAnnotation), List<Object> data = default(List<Object>), List<Object> refreshKeyValues = default(List<Object>))
        {
            // to ensure "annotation" is required (not null)
            if (annotation == null)
            {
                throw new ArgumentNullException("annotation is a required property for V1LoadResult and cannot be null");
            }
            this.Annotation = annotation;
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new ArgumentNullException("data is a required property for V1LoadResult and cannot be null");
            }
            this.Data = data;
            this.DataSource = dataSource;
            this.RefreshKeyValues = refreshKeyValues;
        }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name = "dataSource", EmitDefaultValue = false)]
        public string DataSource { get; set; }

        /// <summary>
        /// Gets or Sets Annotation
        /// </summary>
        [DataMember(Name = "annotation", IsRequired = true, EmitDefaultValue = true)]
        public V1LoadResultAnnotation Annotation { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = true)]
        public List<Object> Data { get; set; }

        /// <summary>
        /// Gets or Sets RefreshKeyValues
        /// </summary>
        [DataMember(Name = "refreshKeyValues", EmitDefaultValue = false)]
        public List<Object> RefreshKeyValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class V1LoadResult {\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  Annotation: ").Append(Annotation).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  RefreshKeyValues: ").Append(RefreshKeyValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as V1LoadResult);
        }

        /// <summary>
        /// Returns true if V1LoadResult instances are equal
        /// </summary>
        /// <param name="input">Instance of V1LoadResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1LoadResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataSource == input.DataSource ||
                    (this.DataSource != null &&
                    this.DataSource.Equals(input.DataSource))
                ) && 
                (
                    this.Annotation == input.Annotation ||
                    (this.Annotation != null &&
                    this.Annotation.Equals(input.Annotation))
                ) && 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.RefreshKeyValues == input.RefreshKeyValues ||
                    this.RefreshKeyValues != null &&
                    input.RefreshKeyValues != null &&
                    this.RefreshKeyValues.SequenceEqual(input.RefreshKeyValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataSource != null)
                {
                    hashCode = (hashCode * 59) + this.DataSource.GetHashCode();
                }
                if (this.Annotation != null)
                {
                    hashCode = (hashCode * 59) + this.Annotation.GetHashCode();
                }
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.RefreshKeyValues != null)
                {
                    hashCode = (hashCode * 59) + this.RefreshKeyValues.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
